@use './variables';
@use './mixins';

html,
body {
  height: 100%;
  font-family: variables.$font-family--primary;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: variables.$color-grayscale--1000;
}

// TODO check if we can stop using @extend

h1 { // TODO: update definition for project.
  @include mixins.heading-h1();
}

h2 { // TODO: update definition for project.
  @include mixins.heading-h2();
}

h3 { // TODO: update definition for project.
  @include mixins.heading-h3();
}

h4 { // TODO: update definition for project.
  @include mixins.heading-h4();
}

h5 { // TODO: update definition for project.
  @include mixins.heading-h5();
}

h6 { // TODO: update definition for project.
  @include mixins.heading-h6();
}

p { // TODO: update definition for project.
  @include mixins.font(variables.$font-size--14);
}

// TODO: update definition for project.
a {
  color: variables.$color-secondary--1;
  text-decoration: none;
  background-color: transparent; // Remove the gray background on active links in IE 10.
  -webkit-text-decoration-skip: objects; // Remove gaps in links underline in iOS 8+ and Safari 8+.

  &:hover {
    color: variables.$color-grayscale--0;
    text-decoration: none;
  }
}

// And undo these styles for placeholder links/named anchors (without href)
// which have not been made explicitly keyboard-focusable (without tabindex).
// It would be more straightforward to just use a[href] in previous block, but that
// causes specificity issues in many other styles that are too complex to fix.
// See https://github.com/twbs/bootstrap/issues/19402

a:not([href]):not([tabindex]) {
  color: inherit;
  text-decoration: none;

  &:hover,
  &:focus {
    color: inherit;
    text-decoration: none;
  }

  &:focus {
    outline: 0;
  }
}

/* stylelint-disable selector-class-pattern, selector-max-id */
#app {
  min-height: 100%;
}

.invisible {
  position: absolute;
  overflow: hidden;
  height: 0;
  width: 0;
  top: 0;
}
/* stylelint-enable */

[inline-template] { // Hides inline templates from flashing before rendering
  display: none;
}
